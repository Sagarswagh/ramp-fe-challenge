{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [transactionApproval, setTransactionApprovalState] = useState({});\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Update the local state for transaction approval\n\n    setTransactionApprovalState(prev => ({ ...prev,\n      [transactionId]: newValue\n    }));\n  }, [fetchWithoutCache]); // Initialize the approval state based on transactions\n\n  useEffect(() => {\n    if (transactions) {\n      const initialApprovalState = {};\n      transactions.forEach(transaction => {\n        initialApprovalState[transaction.id] = false; // Or some logic to set initial values\n      });\n      setTransactionApprovalState(initialApprovalState);\n    }\n  }, [transactions]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval,\n      isApproved: transactionApproval[transaction.id] || false // Pass approval state\n\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"Bg/ZxAIdeYYtDG8irutTAHR1bX8=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useEffect","useState","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","transactionApproval","setTransactionApprovalState","setTransactionApproval","transactionId","newValue","value","prev","initialApprovalState","forEach","transaction","id","map"],"sources":["/Users/sagarwagh/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { SetTransactionApprovalParams, Transaction } from \"src/utils/types\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [transactionApproval, setTransactionApprovalState] = useState<{ [id: string]: boolean }>({});\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      });\n      \n      // Update the local state for transaction approval\n      setTransactionApprovalState((prev) => ({\n        ...prev,\n        [transactionId]: newValue,\n      }));\n    },\n    [fetchWithoutCache]\n  );\n\n  // Initialize the approval state based on transactions\n  useEffect(() => {\n    if (transactions) {\n      const initialApprovalState: { [id: string]: boolean } = {};\n      transactions.forEach((transaction: Transaction) => {\n        initialApprovalState[transaction.id] = false; // Or some logic to set initial values\n      });\n      setTransactionApprovalState(initialApprovalState);\n    }\n  }, [transactions]);\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n          isApproved={transactionApproval[transaction.id] || false} // Pass approval state\n        />\n      ))}\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,mBAAD,EAAsBC,2BAAtB,IAAqDR,QAAQ,CAA4B,EAA5B,CAAnE;EAEA,MAAMS,sBAAsB,GAAGX,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEY,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAMN,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFK,aADoF;MAEpFE,KAAK,EAAED;IAF6E,CAA/D,CAAvB,CADqC,CAMrC;;IACAH,2BAA2B,CAAEK,IAAD,KAAW,EACrC,GAAGA,IADkC;MAErC,CAACH,aAAD,GAAiBC;IAFoB,CAAX,CAAD,CAA3B;EAID,CAZuC,EAaxC,CAACN,iBAAD,CAbwC,CAA1C,CAJuE,CAoBvE;;EACAN,SAAS,CAAC,MAAM;IACd,IAAIK,YAAJ,EAAkB;MAChB,MAAMU,oBAA+C,GAAG,EAAxD;MACAV,YAAY,CAACW,OAAb,CAAsBC,WAAD,IAA8B;QACjDF,oBAAoB,CAACE,WAAW,CAACC,EAAb,CAApB,GAAuC,KAAvC,CADiD,CACH;MAC/C,CAFD;MAGAT,2BAA2B,CAACM,oBAAD,CAA3B;IACD;EACF,CARQ,EAQN,CAACV,YAAD,CARM,CAAT;;EAUA,IAAIA,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,YAAY,CAACc,GAAb,CAAkBF,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEV,OAHX;MAIE,sBAAsB,EAAEG,sBAJ1B;MAKE,UAAU,EAAEF,mBAAmB,CAACS,WAAW,CAACC,EAAb,CAAnB,IAAuC,KALrD,CAK4D;;IAL5D,GACOD,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAhDM;;GAAMd,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}