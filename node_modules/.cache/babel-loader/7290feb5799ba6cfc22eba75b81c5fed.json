{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// src/app.tsx\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: loadingEmployees,\n    fetchAll: fetchAllEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    loading: loadingTransactions,\n    fetchAll: fetchAllTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  useEffect(() => {\n    if (transactions) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...transactions]);\n    }\n  }, [transactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await fetchAllEmployees(); // Load employees independently\n\n    await fetchAllTransactions(); // Load transactions\n\n    setIsLoading(false);\n  }, [fetchAllEmployees, fetchAllTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    await fetchTransactionsByEmployee(employeeId);\n  }, [fetchTransactionsByEmployee]);\n  useEffect(() => {\n    if (employees === null && !loadingEmployees) {\n      loadAllTransactions();\n    }\n  }, [loadingEmployees, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: loadingEmployees || isLoading // Show loading if employees are loading or data is loading\n        ,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: allTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: loadingTransactions || isLoading // Disable if loading transactions or isLoading\n          ,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pubAbsE0G+s285bkBPEzkodE4sM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","loadingEmployees","fetchAll","fetchAllEmployees","paginatedTransactions","loadingTransactions","fetchAllTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","isLoading","setIsLoading","allTransactions","setAllTransactions","transactions","prevTransactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/sagarwagh/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["// src/app.tsx\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, loading: loadingEmployees, fetchAll: fetchAllEmployees } = useEmployees();\n  const { data: paginatedTransactions, loading: loadingTransactions, fetchAll: fetchAllTransactions } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee } = useTransactionsByEmployee();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  useEffect(() => {\n    if (transactions) {\n      setAllTransactions((prevTransactions) => [...prevTransactions, ...transactions]);\n    }\n  }, [transactions]);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await fetchAllEmployees(); // Load employees independently\n    await fetchAllTransactions(); // Load transactions\n\n    setIsLoading(false);\n  }, [fetchAllEmployees, fetchAllTransactions]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      await fetchTransactionsByEmployee(employeeId);\n    },\n    [fetchTransactionsByEmployee]\n  );\n\n  useEffect(() => {\n    if (employees === null && !loadingEmployees) {\n      loadAllTransactions();\n    }\n  }, [loadingEmployees, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={loadingEmployees || isLoading} // Show loading if employees are loading or data is loading\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={allTransactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={loadingTransactions || isLoading} // Disable if loading transactions or isLoading\n              onClick={async () => {\n                await loadAllTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}